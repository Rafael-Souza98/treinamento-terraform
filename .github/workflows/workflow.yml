name: "Terraform infrastructure change management pipeline with github actions"

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

env:
    AWS_REGION : "us-east-1"
    AWS_ASSUMED_ROLE : ${{secrets.AWS_ASSUMED_ROLE}}
    ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION : true

permissions:
    id-token: write
    contents: write
    pull-requests: write

jobs:
    TerraformJob:
        runs-on: ubuntu-latest
        defaults:
            
            run:
                working-directory: ./
        
        steps:
            - name: Checkout repository
              uses: actions/checkout@v2

              
            - name: Configure Terraform
              uses: hashicorp/setup-terraform@v2
              with:
                terraform_version: 1.5.5


            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v2
              with:
                role-to-assume: ${{env.AWS_ASSUMED_ROLE}}
                role-session-name: "terrafom-actions"
                aws-region: ${{env.AWS_REGION}}
                    
            - name: Terraform init
              id: init
              run: terraform init

            - name: Terraform fmt
              id: fmt
              run: terraform init -check #formata e mostra se esta formatado
              continue-on-error: true

            - name: Terraform validate
              id: validate
              run: terraform validate
              continue-on-error: true

            - name: Terraform plan
              id: plan
              if: github.event_name == 'pull_request'
              run: terraform plan -out=tfplan -input=false
              continue-on-error: true

            - uses: actions/github-script@v6
              if: github.event_name == 'pull_request'
              env:
                  PLAN: ${{ steps.plan.outputs.stdout }}
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
                      #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
                      #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
                      #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
  
                      <details><summary>Show Plan</summary>
  
                      \`\`\`terraform\n
                      ${process.env.PLAN}
                      \`\`\`
  
                      </details>
  
                      *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
  
                      github.rest.issues.createComment({
                      issue_number: context.issue.number,
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      body: output
                      })
              
            - name: Terraform plan status
              if: steps.plan.outcome == 'failure'|| steps.validate.outcome == 'failure'|| steps.fmt.outcome == 'failure'
              run: exit 1
              
            - name: Terraform apply
              if: github.event_name == 'pus'&& github.ref == 'refs/heads/main'
              run: terraform apply --auto-approve
            

            

            